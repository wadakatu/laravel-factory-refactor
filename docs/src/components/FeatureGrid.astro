```astro
---
import FeatureCard from './FeatureCard.astro';

interface Feature {
  title: string;
  description: string;
  icon: string;
}

interface Props {
  features: Feature[];
}

const { features } = Astro.props as Props;
---

<div class="feature-grid">
  {features.map(feature => (
    <FeatureCard 
      title={feature.title} 
      description={feature.description} 
      icon={feature.icon} 
    />
  ))}
</div>

<style>
  :root {
    --color-primary: #4A90E2;
    --color-secondary: #50E3C2;
    --color-accent: #F5A623;
    --color-background: #F4F4F6;
    --color-surface: #FFFFFF;
    --color-text-primary: #333333;
    --color-text-secondary: #666666;
    --color-text-accent: #4A90E2;
    --font-heading: 'Montserrat', sans-serif;
    --font-body: 'Open Sans', sans-serif;
    --font-size-body: 16px;
    --line-height-body: 1.5;
  }

  .feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 16px;
    background-color: var(--color-background);
  }

  @media (max-width: 768px) {
    .feature-grid {
      grid-template-columns: 1fr;
    }
  }

  /* Accessibility and Performance Enhancements */
  .feature-grid > * {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    will-change: transform, box-shadow;
  }

  .feature-grid > *:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
</style>
```

### 説明
1. **Propsの型定義**: TypeScriptの型を使用して、FeatureとPropsのインターフェースを定義しました。
2. **CSS変数**: カラーパレットやフォントをCSS変数として定義し、テーマ対応を容易にしました。
3. **モダンなCSS技術**: Gridを使用してレスポンシブルで柔軟なレイアウトを実現しました。メディアクエリを使用して小さな画面での表示を最適化しています。
4. **アクセシビリティとパフォーマンス**: CSSの`transition`と`will-change`を使用して、ユーザーインタラクション時のパフォーマンスを改善しました。
5. **ビジュアルスタイル**: ホバー時のトランスフォームとシャドウで、デザインシステムの「soft shadows」と「subtle animations」を反映しました。