以下は、指定された要件に基づいたAstroコンポーネントファイルです。`FeatureGrid`コンポーネントは、複数の`FeatureCard`コンポーネントをグリッドレイアウトで表示し、TypeScriptで型安全性を確保しています。また、CSS変数を活用してテーマ対応を実現しています。

```astro
---
import FeatureCard from './FeatureCard.astro';

interface Feature {
  title: string;
  description: string;
  imageUrl: string;
}

interface Props {
  features: Feature[];
}

const { features } = Astro.props as Props;
---

<div class="feature-grid">
  {features.map((feature) => (
    <FeatureCard key={feature.title} {...feature} />
  ))}
</div>

<style>
  :root {
    --color-primary: #0A74DA;
    --color-secondary: #F5B700;
    --color-accent: #0F4C81;
    --color-background: #FFFFFF;
    --color-surface: #F8F9FA;
    --color-text-primary: #333333;
    --color-text-secondary: #555555;
    --color-text-accent: #0A74DA;
    --font-heading: 'Roboto', sans-serif;
    --font-body: 'Open Sans', sans-serif;
    --font-code: 'Fira Code', monospace;
    --font-weight-heading: 700;
    --font-size-body: 16px;
    --line-height-body: 1.5;
  }

  .feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 16px;
    background-color: var(--color-background);
    color: var(--color-text-primary);
    padding: 16px;
  }

  @media (max-width: 768px) {
    .feature-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
```

### 補足
- `FeatureCard`コンポーネントは別途作成する必要があります。このコンポーネントでは、各フィーチャーの詳細（タイトル、説明、画像など）を表示します。
- CSSではカスタムプロパティを使用し、デザインシステムのカラーやフォントを定義しています。
- `Astro.props`を用いてTypeScriptによる型安全性を確保しています。
- グリッドレイアウトを使用してレスポンシブなデザインを実現し、モバイル環境では1列レイアウトに切り替わるようにしています。