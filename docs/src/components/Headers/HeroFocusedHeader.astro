---
export interface Props {
  title: string;
  currentPage?: 'home' | 'docs' | string;
  githubUrl?: string;
  hasLogo?: boolean;
  logoUrl?: string;
  homeUrl?: string;
  docsUrl?: string;
  isDemo?: boolean;
}

const { 
  title, 
  currentPage = 'home', 
  githubUrl = 'https://github.com/wadakatu/gitlyte', 
  hasLogo = false, 
  logoUrl = '',
  homeUrl = '../',
  docsUrl = '../docs',
  isDemo = false
} = Astro.props;
---

<header class="hero-focused-header">
  <div class="container">
    <nav class="main-nav">
      <div class="nav-brand">
        {hasLogo && logoUrl ? (
          <img src={logoUrl} alt={`${title} logo`} class="brand-logo" />
        ) : (
          <h1>{title}</h1>
        )}
      </div>
      <div class="nav-links">
        {isDemo ? (
          <>
            <button class={`nav-link ${currentPage === 'home' ? 'active' : ''}`} onclick="showDemo()">üè† Home</button>
            <button class={`nav-link ${currentPage === 'docs' ? 'active' : ''}`} onclick="showDocs()">üìñ Docs</button>
            <a href={githubUrl} class="nav-link" target="_blank" rel="noopener">üîó GitHub</a>
          </>
        ) : (
          <>
            <a href={homeUrl} class={`nav-link ${currentPage === 'home' ? 'active' : ''}`}>üè† Home</a>
            <a href={docsUrl} class={`nav-link ${currentPage === 'docs' ? 'active' : ''}`}>üìñ Docs</a>
            <a href={githubUrl} class="nav-link" target="_blank" rel="noopener">üîó GitHub</a>
          </>
        )}
      </div>
    </nav>
  </div>
</header>

<style>
  .hero-focused-header {
    background: rgba(255, 255, 255, 0.98);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid var(--color-border);
    position: sticky;
    top: 0;
    z-index: 1000;
    box-shadow: var(--shadow-sm);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .main-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-md) 0;
    min-height: 4rem;
  }

  .nav-brand {
    display: flex;
    align-items: center;
    min-height: 2.5rem; /* Ensure consistent height regardless of logo vs text */
  }

  .nav-brand h1 {
    margin: 0;
    font-size: var(--text-2xl);
    color: var(--color-primary);
    font-weight: 700;
    line-height: 2.5rem; /* Match logo height for consistency */
  }

  .brand-logo {
    height: 2.5rem;
    width: auto;
    max-width: 12rem;
    object-fit: contain;
  }

  .nav-links {
    display: flex;
    gap: var(--space-sm);
    align-items: center;
  }

  .nav-link {
    text-decoration: none;
    background: none;
    border: none;
    color: var(--color-text-secondary);
    font-weight: 500;
    font-size: var(--text-sm);
    padding: var(--space-sm) var(--space-md);
    border-radius: var(--radius-md);
    transition: all 0.2s ease;
    cursor: pointer;
    font-family: inherit;
  }

  .nav-link:hover {
    background: color-mix(in srgb, var(--color-primary) 15%, transparent);
    color: var(--color-primary);
    transform: translateY(-1px);
  }

  .nav-link.active {
    background: var(--color-primary);
    color: white;
  }

  @media (max-width: 768px) {
    .main-nav {
      flex-direction: column;
      gap: var(--space-md);
    }

    .nav-links {
      gap: var(--space-xs);
      justify-content: center;
    }
  }
</style>

<script>
  // Wait for global functions to be available and override if needed
  document.addEventListener('DOMContentLoaded', () => {
    const currentPath = window.location.pathname;
    const isMainDemoPage = currentPath === '/' || currentPath === '/index.html' || currentPath === '/gitlyte/' || currentPath === '/gitlyte/index.html';
    
    if (isMainDemoPage) {
      console.log('[HeroFocusedHeader] On main demo page, waiting for global functions');
      
      // Wait a bit for global functions to be available
      setTimeout(() => {
        const hasGlobalFunctions = typeof (window as any).showDemo === 'function' && typeof (window as any).showDocs === 'function';
        console.log('[HeroFocusedHeader] Global functions available?', hasGlobalFunctions);
        
        if (hasGlobalFunctions) {
          console.log('[HeroFocusedHeader] Global functions found, overriding local functions');
          // Override local functions to use global ones
          window.showDemo = (window as any).showDemo;
          window.showDocs = (window as any).showDocs;
        }
      }, 100);
    }
  });

  // Navigation functionality for demo pages
  function showDemo() {
    // Check if we're in demo mode (main demo page)
    const currentPath = window.location.pathname;
    const isMainDemoPage = currentPath === '/' || currentPath === '/index.html' || currentPath === '/gitlyte/' || currentPath === '/gitlyte/index.html';
    
    console.log('[HeroFocusedHeader] showDemo called', { currentPath, isMainDemoPage, hasGlobalShowDemo: typeof (window as any).showDemo === 'function' });
    
    if (isMainDemoPage) {
      // Always check for global function first
      const globalFunction = (window as any).showDemo;
      if (typeof globalFunction === 'function' && globalFunction !== showDemo) {
        console.log('[HeroFocusedHeader] Calling global showDemo');
        globalFunction();
        return; // Prevent further execution
      }
    }
    
    // In individual pages, navigate to home
    console.log('[HeroFocusedHeader] Navigating to home page');
    const isDemoPage = !currentPath.includes('/docs');
    if (!isDemoPage) {
      window.location.href = window.location.pathname.replace('/docs', '');
    }
  }

  function showDocs() {
    // Check if we're in demo mode (main demo page)
    const currentPath = window.location.pathname;
    const isMainDemoPage = currentPath === '/' || currentPath === '/index.html' || currentPath === '/gitlyte/' || currentPath === '/gitlyte/index.html';
    
    console.log('[HeroFocusedHeader] showDocs called', { currentPath, isMainDemoPage, hasGlobalShowDocs: typeof (window as any).showDocs === 'function' });
    
    if (isMainDemoPage) {
      // Always check for global function first
      const globalFunction = (window as any).showDocs;
      if (typeof globalFunction === 'function' && globalFunction !== showDocs) {
        console.log('[HeroFocusedHeader] Calling global showDocs');
        globalFunction();
        return; // Prevent further execution
      }
    }
    
    // In individual pages, navigate to docs
    console.log('[HeroFocusedHeader] Navigating to docs page');
    const isDocsPage = currentPath.includes('/docs');
    if (!isDocsPage) {
      window.location.href = window.location.pathname + '/docs';
    }
  }
</script>